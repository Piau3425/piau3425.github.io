<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Union-Find</title>
      <link href="/post/Union-Find/"/>
      <url>/post/Union-Find/</url>
      
        <content type="html"><![CDATA[<h1>Union-Find (Disjoint-Set)</h1><p>從 Disjoint-Set 這個名字來看<br>這個資料結構是由許多 Set（集合） 所組成，並且彼此 Disjoint（互斥）<br>通常會用來解決 <strong>集合合併</strong> 和 <strong>集合查找</strong> 的問題</p><h2 id="要點">要點</h2><p><strong>功能</strong></p><ul><li>union：合併，將兩個集合合併為一個集合</li><li>find：查找某節點的根節點，用來確定該節點屬於哪一個集合</li></ul><blockquote><p>可以針對其他的需求實作<br>例如：size（查詢集合中有幾項元素）、sum（查詢集合的數值總和）</p></blockquote><p><strong>觀念</strong></p><p>需要一個陣列用來記錄各個節點的父節點<br>初始化時，每個節點的父節點都是自己或是原本已指定好的圖<br>在隨著多次合併之後，可以利用遞迴函式查找到 a 和 b 節點的根節點來判斷是否在同一個集合內</p><h2 id="實作">實作</h2><p><strong>find</strong></p><p>這邊除了直接查找根節點之外，同時還用了一種觀念就是 「路徑壓縮」<br>路徑壓縮也就是在查詢的過程中順便將所有經過的節點指向根節點，使其扁平化</p><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Find</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">x</span><span style="color: #E1E4E8">) { </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> (anc[x] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">?</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> anc[x] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Find</span><span style="color: #E1E4E8">(anc[x])); }</span></span></code></pre></div></div></figure><p><strong>union</strong></p><p>如果 p 的根節點與 q 的根節點相同，就不做任何動作<br>如果不同，則將 q 的根節點的父節點設為 p 的根節點</p><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Union</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">p</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">q</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">find</span><span style="color: #E1E4E8">(p), b </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">find</span><span style="color: #E1E4E8">(q);</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (a </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> b) </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8">(anc[a] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> b);</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><h2 id="範例">範例</h2><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">#include</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&lt;bits/stdc++.h&gt;</span></span><span class="line"><span style="color: #F97583">using</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">namespace</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">std</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #F97583">#define</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">int</span><span style="color: #E1E4E8"> long long</span></span><span class="line"></span><span class="line"><span style="color: #E1E4E8">vector</span><span style="color: #F97583">&lt;int&gt;</span><span style="color: #E1E4E8"> anc;</span></span><span class="line"></span><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Find</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">x</span><span style="color: #E1E4E8">) { </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> (anc[x] </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">?</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> anc[x] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Find</span><span style="color: #E1E4E8">(anc[x])); }</span></span><span class="line"></span><span class="line"><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Union</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">p</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">q</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Find</span><span style="color: #E1E4E8">(p), b </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Find</span><span style="color: #E1E4E8">(q);</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (a </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> b) anc[a] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> b;</span></span><span class="line"><span style="color: #E1E4E8">}</span></span><span class="line"></span><span class="line"><span style="color: #F97583">signed</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">main</span><span style="color: #E1E4E8">() {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> n, m;</span></span><span class="line"><span style="color: #E1E4E8">    cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> n </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> m;</span></span><span class="line"><span style="color: #E1E4E8">    anc.</span><span style="color: #B392F0">resize</span><span style="color: #E1E4E8">(n);</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">iota</span><span style="color: #E1E4E8">(anc.</span><span style="color: #B392F0">begin</span><span style="color: #E1E4E8">(), anc.</span><span style="color: #B392F0">end</span><span style="color: #E1E4E8">());</span></span><span class="line"></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">while</span><span style="color: #E1E4E8"> (m</span><span style="color: #F97583">--</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">        string cmd;</span></span><span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> p, q;</span></span><span class="line"><span style="color: #E1E4E8">        cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> cmd;</span></span><span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (cmd </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;union&quot;</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">            cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> p </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> q;</span></span><span class="line"><span style="color: #E1E4E8">            </span><span style="color: #B392F0">Union</span><span style="color: #E1E4E8">(p, q);</span></span><span class="line"><span style="color: #E1E4E8">        }</span></span><span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">else</span><span style="color: #E1E4E8"> {</span></span><span class="line"><span style="color: #E1E4E8">            cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> p;</span></span><span class="line"><span style="color: #E1E4E8">            cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Find</span><span style="color: #E1E4E8">(p) </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&#39;</span><span style="color: #79B8FF">\n</span><span style="color: #9ECBFF">&#39;</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #E1E4E8">        }</span></span><span class="line"><span style="color: #E1E4E8">    }</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure>]]></content>
      
      
      <categories>
          
          <category> 資訊類 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 競程 </tag>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quick-Notes</title>
      <link href="/post/Quick-Notes/"/>
      <url>/post/Quick-Notes/</url>
      
        <content type="html"><![CDATA[<h1>隨手紀錄的 C++ 筆記</h1><h2 id="奇怪的小技巧（毒瘤寫法）">奇怪的小技巧（毒瘤寫法）</h2><p>這裡記錄一些我覺得很酷、第一次看到的時候讓我打開眼界的寫法<br>比較主觀#</p><h3 id="void-的-return">void 的 return</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">f</span><span style="color: #E1E4E8">() {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8">(cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;oh&quot;</span><span style="color: #E1E4E8">);</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><h3 id="多項-return">多項 return</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">f</span><span style="color: #E1E4E8">() {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;oh&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><h3 id="輸入數字，執行-n-次迴圈">輸入數字，執行 n 次迴圈</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> n; n; n</span><span style="color: #F97583">--</span><span style="color: #E1E4E8">) {}</span></span></code></pre></div></div></figure><h3 id="計算總合為-m-的次數">計算總合為 m 的次數</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #E1E4E8">cnt </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> sum </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> m</span></span></code></pre></div></div></figure><h3 id="兩數互換">兩數互換</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">10</span><span style="color: #E1E4E8">, b </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">20</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #E1E4E8">a </span><span style="color: #F97583">^=</span><span style="color: #E1E4E8"> b; b </span><span style="color: #F97583">^=</span><span style="color: #E1E4E8"> a; a </span><span style="color: #F97583">^=</span><span style="color: #E1E4E8"> b;</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot; &quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> b;</span></span></code></pre></div></div></figure><h3 id="不用下標輸出陣列">不用下標輸出陣列</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> arr[] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">3</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">4</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">};</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">(arr </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8">);</span></span><span class="line"><span style="color: #F97583">*</span><span style="color: #E1E4E8">(arr</span><span style="color: #F97583">+</span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">8</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">*</span><span style="color: #E1E4E8">(arr </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8">);</span></span></code></pre></div></div></figure><h2 id="一些感覺不紀錄會忘記的正常寫法">一些感覺不紀錄會忘記的正常寫法</h2><h3 id="輸出中文（一個中文字佔兩格英文字的空間）">輸出中文（一個中文字佔兩格英文字的空間）</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #E1E4E8">string s </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;一二三四五六日&quot;</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> i;</span></span><span class="line"><span style="color: #E1E4E8">cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> i;</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> s[</span><span style="color: #79B8FF">2</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">i] </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> s[</span><span style="color: #79B8FF">2</span><span style="color: #F97583">*</span><span style="color: #E1E4E8">i</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span></code></pre></div></div></figure><h3 id="大數除法判倍數">大數除法判倍數</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #E1E4E8">string s;</span></span><span class="line"><span style="color: #E1E4E8">cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> s;</span></span><span class="line"><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">auto</span><span style="color: #E1E4E8"> c : s) {</span></span><span class="line"><span style="color: #E1E4E8">    sum </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> (((c</span><span style="color: #F97583">-</span><span style="color: #9ECBFF">&#39;0&#39;</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> sum) </span><span style="color: #F97583">%</span><span style="color: #E1E4E8"> n)</span><span style="color: #F97583">*</span><span style="color: #79B8FF">10</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><h3 id="控制-range-based-loop-空格換行">控制 range-based loop 空格換行</h3><figure class="shiki cpp"><div class='codeblock'><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #E1E4E8">vector</span><span style="color: #F97583">&lt;int&gt;</span><span style="color: #E1E4E8"> v;</span></span><span class="line"><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">auto</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">i : v) {</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot; </span><span style="color: #79B8FF">\n</span><span style="color: #9ECBFF">&quot;</span><span style="color: #E1E4E8">[</span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">i </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;</span><span style="color: #E1E4E8">v.</span><span style="color: #B392F0">back</span><span style="color: #E1E4E8">()];</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure>]]></content>
      
      
      <categories>
          
          <category> 資訊類 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 競程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fenwick-Tree</title>
      <link href="/post/Fenwick-Tree/"/>
      <url>/post/Fenwick-Tree/</url>
      
        <content type="html"><![CDATA[<h1>Fenwick Tree (Binary Indexed Tree)</h1><p>相較於前綴和只能用來查詢區間和<br>當我們想要修改某項數值時，就需要重新處理一次<br>前綴和的 O(1) 求區間和，無法滿足大量的修改操作<br>這時候可以使用 Fenwick Tree 來快速的修改、求總和<br>Fenwick Tree 可以在 O(n) 的時間初始化，並且在 O(log n) 的時間查詢區間和、修改其中一項元素的值</p><blockquote><p>這種資料結構在中國稱作為樹狀數組</p></blockquote><h2 id="要點">要點</h2><p><strong>功能</strong></p><ul><li>update：更新某項元素的值</li><li>query：查詢某範圍的區間和</li></ul><p><strong>lowbit</strong></p><p>lowbit 是整個資料結構的核心<br>假如 n = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="5.295ex" height="2.307ex" role="img" focusable="false" viewBox="0 -666 2340.2 1019.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1389,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container>，那 n 的二進制表示法就是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="7.888ex" height="2.307ex" role="img" focusable="false" viewBox="0 -666 3486.7 1019.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2000,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(2533,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container><br>這時候 n 可以拆分成 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.904ex" role="img" focusable="false" viewBox="0 -841.7 936.6 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container> + <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 936.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>，則 n 的 lowbit 就是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 936.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>（取最小的位元）<br>從二進制上可以直接理解為 10010 的 lowbit 是 10</p><p><strong>觀念</strong></p><p>我們會需要兩個陣列 v 跟 bit<br>v：原數列<br>BIT：預處理後的數列</p><p>最後可以藉由 bit 陣列求出前綴和並計算該區間和</p><blockquote><p>因為位元計算 lowbit 及前綴求區間和，BIT 陣列也是 1-based</p></blockquote><p>底下是 BIT 的圖解</p><img src="/post/Fenwick-Tree/fenwick-tree.png" class=""><p><sub> 圖片引用自 <a href="https://medium.com/carpanese/an-illustrated-introduction-to-centroid-decomposition-8c1989d53308">這裡</a> </sub></p><p>只要將 v 中的所有元素取 index 的二進制中所有為 1 的 bit<br>當作 BIT 的 index，將其值增加 v 的數值<br>就可以將 BIT 建表</p><h2 id="實作">實作</h2><p>Fenwick Tree 會用到的變數、陣列<br>這次範例會開在全域，讓函式可以直接存取</p><p>n 為原陣列的長度</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #E1E4E8">vector</span><span style="color: #F97583">&lt;int&gt;</span><span style="color: #E1E4E8"> v, BIT;</span></span><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> n;</span></span></code></pre></div></div></figure><p><strong>lowbit</strong></p><p>可以對相反數做 &amp; 運算來實作 lowbit<br>且可以利用 define 來增加程式碼的可讀性</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">#define</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">x</span><span style="color: #E1E4E8">) ((x)&amp;-(x))</span></span></code></pre></div></div></figure><p><strong>update 函式</strong></p><p>原數列 v 的改變要映射到 BIT 數列<br>其實就是對受影響的區間增加 / 減少 v 的值</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">upd</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">idx</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">val</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (; idx </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> n; idx </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(idx)) bit[idx] </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> val;</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><blockquote><hr><p>如果想要更改某項 v 數列中的值<br>則也就是刪除原本的值，再增加新的值</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #B392F0">upd</span><span style="color: #E1E4E8">(a, v[a]);</span></span><span class="line"><span style="color: #E1E4E8">v[a] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> b;</span></span><span class="line"><span style="color: #B392F0">upd</span><span style="color: #E1E4E8">(a, b);</span></span></code></pre></div></div></figure><hr></blockquote><p><strong>建表</strong></p><p>而建表其實就是對在 v 中的每項數值<br>在 BIT 內更新一次</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">build</span><span style="color: #E1E4E8">() {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> n; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">        cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> v[i];</span></span><span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">upd</span><span style="color: #E1E4E8">(i, v[i]);</span></span><span class="line"><span style="color: #E1E4E8">    }</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><p><strong>查詢</strong></p><p>從 BIT 查詢區間和 [a, b]，需要從 BIT 裡面取兩次前綴和<br>也就是 [1, b] 減去 [1, a-1]</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">query</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">a</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">b</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> sa </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, sb </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; a</span><span style="color: #F97583">--</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (; b </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; b </span><span style="color: #F97583">-=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(b)) sb </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> bit[b];</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (; a </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; a </span><span style="color: #F97583">-=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(a)) sa </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> bit[a];</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> sb</span><span style="color: #F97583">-</span><span style="color: #E1E4E8">sa;</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><h2 id="範例">範例</h2><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">#include</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&lt;bits/stdc++.h&gt;</span></span><span class="line"><span style="color: #F97583">using</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">namespace</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">std</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #F97583">#define</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">int</span><span style="color: #E1E4E8"> long long</span></span><span class="line"><span style="color: #F97583">#define</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">x</span><span style="color: #E1E4E8">) ((x)&amp;-(x))</span></span><span class="line"></span><span class="line"><span style="color: #E1E4E8">vector</span><span style="color: #F97583">&lt;int&gt;</span><span style="color: #E1E4E8"> v, bit;</span></span><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> n, m;</span></span><span class="line"></span><span class="line"><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">upd</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">idx</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">val</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (; idx </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> n; idx </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(idx)) bit[idx] </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> val;</span></span><span class="line"><span style="color: #E1E4E8">}</span></span><span class="line"></span><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">query</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">a</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #FFAB70">b</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> sa </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, sb </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; a</span><span style="color: #F97583">--</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (; b </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; b </span><span style="color: #F97583">-=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(b)) sum </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> bit[b];</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (; a </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; a </span><span style="color: #F97583">-=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">lowbit</span><span style="color: #E1E4E8">(a)) sum </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> bit[a];</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> sb</span><span style="color: #F97583">-</span><span style="color: #E1E4E8">sa;</span></span><span class="line"><span style="color: #E1E4E8">}</span></span><span class="line"></span><span class="line"><span style="color: #F97583">signed</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">main</span><span style="color: #E1E4E8">() {</span></span><span class="line"><span style="color: #E1E4E8">    cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> n </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> m;</span></span><span class="line"><span style="color: #E1E4E8">    v.</span><span style="color: #B392F0">resize</span><span style="color: #E1E4E8">(n</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">); bit.</span><span style="color: #B392F0">resize</span><span style="color: #E1E4E8">(n</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">);</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> n; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">        cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> v[i];</span></span><span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">upd</span><span style="color: #E1E4E8">(i, v[i]);</span></span><span class="line"><span style="color: #E1E4E8">    }</span></span><span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">while</span><span style="color: #E1E4E8"> (m</span><span style="color: #F97583">--</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> a, b;</span></span><span class="line"><span style="color: #E1E4E8">        cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> b;</span></span><span class="line"><span style="color: #E1E4E8">        cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">query</span><span style="color: #E1E4E8">(a, b) </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">'</span><span style="color: #79B8FF">\n</span><span style="color: #9ECBFF">'</span><span style="color: #E1E4E8">;</span></span><span class="line"><span style="color: #E1E4E8">    }</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure>]]></content>
      
      
      <categories>
          
          <category> 資訊類 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 競程 </tag>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prefix-Sum</title>
      <link href="/post/Prefix-Sum/"/>
      <url>/post/Prefix-Sum/</url>
      
        <content type="html"><![CDATA[<h1>前綴和</h1><p>前綴和是對於數列的一種預處理<br>經過 O(n) 初始化過後可以在 O(1) 就取得 [a, b] 的區間和</p><h1>一維前綴和</h1><h2 id="要點">要點</h2><p><strong>功能</strong></p><ul><li>query：查詢某範圍的區間和</li></ul><p><strong>觀念</strong></p><p>一維前綴和就是將第 N 項的數字改為 N 之前的所有總和<br>之後每次進行查詢我們就只需要輸出第 b 項數字減去第 a - 1 項數字</p><blockquote><p>為了避免 a - 1 會減到負數<br>我們需要將索引改成 1-based，並將第 0 項數字設為 0</p></blockquote><img src="/post/Prefix-Sum/1d-prefix-sum.png" class=""><h2 id="實作">實作</h2><p>陣列宣告</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #B392F0">vector</span><span style="color: #E1E4E8">&lt;</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">&gt; </span><span style="color: #B392F0">v</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">n</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">);</span></span></code></pre></div></div></figure><p>資料輸入</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> n; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> v[i];</span></span><span class="line"><span style="color: #E1E4E8">    v[i] </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> v[i</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><p>查詢</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #E1E4E8">cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> b;</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> v[b] </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> v[a</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span></code></pre></div></div></figure><h1>二維前綴和</h1><h2 id="要點-2">要點</h2><p>v[i][j] 儲存左上 ( 0, 0 ) 右下 (i, j) 內的總和<br>剩下的交給圖來解釋</p><img src="/post/Prefix-Sum/2d-prefix-sum.png" class=""><p><sub> 圖片引用自 <a href="https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-304-range-sum-query-2d-immutable/">這裡</a> </sub></p><h2 id="實作-2">實作</h2><p>宣告陣列</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #B392F0">vector</span><span style="color: #E1E4E8">&lt;</span><span style="color: #B392F0">vector</span><span style="color: #E1E4E8">&lt;</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">&gt;&gt; </span><span style="color: #B392F0">v</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">row</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">vector</span><span style="color: #E1E4E8">&lt;</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">&gt;(col</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">));</span></span></code></pre></div></div></figure><p>資料輸入</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> row; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> j </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; j </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> col; j</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> v[i][j];</span></span><span class="line"><span style="color: #E1E4E8">    v[i][j] </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> v[i</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][j] </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> v[i][j</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> v[i</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][j</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span><span class="line"><span style="color: #E1E4E8">}</span></span></code></pre></div></div></figure><p>查詢</p><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #E1E4E8">cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> sx </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> sy </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> ex </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> ey;</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> v[ey][ex] </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> v[ey][sx</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> v[sy</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][ex] </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> v[sy</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][sx</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span></code></pre></div></div></figure><h2 id="範例">範例</h2><figure class="shiki cpp"><div class="codeblock"><div class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div><div class="code"><pre class="shiki github-dark"><code><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> row, col;</span></span><span class="line"><span style="color: #E1E4E8">cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> row </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> col;</span></span><span class="line"><span style="color: #B392F0">vector</span><span style="color: #E1E4E8">&lt;</span><span style="color: #B392F0">vector</span><span style="color: #E1E4E8">&lt;</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">&gt;&gt; </span><span style="color: #B392F0">v</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">row</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">vector</span><span style="color: #E1E4E8">&lt;</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">&gt;(col</span><span style="color: #F97583">+</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">));</span></span><span class="line"></span><span class="line"><span style="color: #F97583">for</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> row; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> j </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; j </span><span style="color: #F97583">&lt;=</span><span style="color: #E1E4E8"> col; j</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span><span class="line"><span style="color: #E1E4E8">    cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> v[i][j];</span></span><span class="line"><span style="color: #E1E4E8">    v[i][j] </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> v[i</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][j] </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> v[i][j</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> v[i</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][j</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span><span class="line"><span style="color: #E1E4E8">}</span></span><span class="line"></span><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> sx, sy, ex, ey;</span></span><span class="line"><span style="color: #E1E4E8">cin </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> sx </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> sy </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> ex </span><span style="color: #F97583">&gt;&gt;</span><span style="color: #E1E4E8"> ey;</span></span><span class="line"><span style="color: #E1E4E8">cout </span><span style="color: #F97583">&lt;&lt;</span><span style="color: #E1E4E8"> v[ey][ex] </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> v[ey][sx</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> v[sy</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][ex] </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> v[sy</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">][sx</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span></code></pre></div></div></figure>]]></content>
      
      
      <categories>
          
          <category> 資訊類 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 競程 </tag>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
